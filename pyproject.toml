[project]
name = "maestro"
version = "0.0.5"
description = "A simple Python task orchestrator"
requires-python = ">=3.8"
dependencies = [
    "click>=8.1.3",
    "pyyaml>=6.0",
    "networkx>=3.1",
    "rich",
    "ansible_runner>=2.3.1",
    "pydantic>=2.0",
    "typer>=0.12.3",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "requests>=2.31.0",
    "croniter>=1.3.0",
    # Add database dependencies for better state management
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
]

[project.scripts]
maestro = "maestro.cli_client:app"
maestro-server = "maestro.server.app:start_server"

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.3.0",  # Parallel test execution
    "pytest-timeout>=2.1.0",  # Prevent hanging tests
    "pytest-randomly>=3.12.0",  # Random test order to catch interdependencies
    "responses>=0.23.0",
    "mypy>=1.0.0",
    "freezegun>=1.2.0",
    "httpx>=0.28.1",
    "factory-boy>=3.3.0",  # Test data factories
    "testcontainers>=3.7.0",  # For database testing
    "ruff>=0.1.0",  # Linting and formatting
]

dev = [
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "bandit>=1.7.0",  # Security linting
    "safety>=2.3.0",  # Dependency vulnerability checking
]

# Consolidate dependency groups - remove the separate [dependency-groups] section
# and use the standard [project.optional-dependencies] format

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

# Pytest configuration - crucial for fixing your test issues
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Key settings to fix database state issues
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=maestro",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--maxfail=5",  # Stop after 5 failures
    "--durations=10",  # Show 10 slowest tests
    # Database isolation settings
    "--reuse-db",  # Don't recreate test DB every time
    "--nomigrations",  # Skip migrations in tests
    # Parallel execution (comment out if causing issues)
    # "-n auto",  # Run tests in parallel
]

# Test markers for better organization
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "db: marks tests that require database",
    "terraform: marks tests that require terraform/tofu",
    "unit: marks tests as unit tests",
    "api: marks tests that test API endpoints",
    "cli: marks tests that test CLI functionality",
]

# Timeout settings to prevent hanging tests
timeout = 300
timeout_method = "thread"

# Asyncio configuration
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["maestro"]
omit = [
    "tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "maestro/server/migrations/*",
    "setup.py",
    "conftest.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Ruff configuration for linting and formatting
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "Q",  # flake8-quotes
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "B904", # Allow raising exceptions without from
    "ARG002", # Unused method argument
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S101", # asserts allowed in tests
    "ARG", # unused function args -> fixtures nevertheless are functionally relevant
    "FBT", # don't care about booleans as positional arguments in tests
]

[tool.ruff.isort]
known-first-party = ["maestro"]

# MyPy configuration for type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ansible_runner.*",
    "networkx.*",
    "croniter.*",
    "factory_boy.*",
    "testcontainers.*",
]
ignore_missing_imports = true

# Black configuration (if you prefer it over ruff format)
[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration (if not using ruff for import sorting)
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["maestro"]